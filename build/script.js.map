{"version":3,"file":"script.js","mappings":"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","sources":["webpack://willsides-inat-grid/./src/script.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function() {\r\n    function formatAPIdate( isoDateStr ) {\r\n        const date = new Date(isoDateStr);\r\n        const month = String(date.getMonth() + 1).padStart(2, '0'); // getMonth() is zero-indexed, so we add 1\r\n        const day = String(date.getDate()).padStart(2, '0'); // pad minutes with 0 if necessary\r\n        const year = date.getFullYear();\r\n    \r\n        return `${year}-${month}-${day}`;\r\n    }\r\n\r\n    let inatgrids = document.querySelectorAll('.ws-inat-grid-container')\r\n    let baseUrl = 'https://api.inaturalist.org/v1/observations'\r\n\t\r\n    let valueMap = {\r\n\t\t'needs_id': 'ID',\r\n\t\t'research': 'RG',\r\n\t\t'casual': '',\r\n\t\t'Needs ID': 'ID',\r\n\t\t'Research Grade': 'RG',\r\n\t\t'':''\r\n\t};\r\n\tlet inverseMap = {\r\n\t\t'ID': 'Needs ID',\r\n\t\t'RG': 'Research Grade',\r\n\t\t'': ''\r\n\t};\r\n\r\n    inatgrids.forEach(function(inatgrid) {\r\n        let params = {...inatgrid.dataset}\r\n\r\n\t\tparams.d1 = formatAPIdate(params.d1);\r\n\t\tparams.d2 = formatAPIdate(params.d2);\r\n\r\n        let url = new URL(baseUrl);\r\n        url.search = new URLSearchParams(params).toString()\r\n\r\n        fetch(url)\r\n        .then(response => {\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\treturn response.json().then(errorData => { throw new Error(`${errorData.error} Status: ${response.status}`) });\r\n\t\t\t}\r\n\t\t\treturn response.json();\r\n\t\t})\r\n        .then(data => {\r\n\r\n\t\t\tif (data.results.length == 0) {\r\n\t\t\t\tthrow new Error('No observations to show.');\r\n\t\t\t}\r\n            \r\n            data.results.forEach(item => {\r\n                let gridItemDiv = document.createElement('div');\r\n                let topRowDiv = document.createElement('div');\r\n                let speciesDiv = document.createElement('div');\r\n                let idsDiv = document.createElement('div');\r\n                let gradeDiv = document.createElement('div');\r\n                let gridLink = document.createElement('a');\r\n\r\n                let bgurl = item.observation_photos[0].photo.url\r\n                bgurl = bgurl.replace('square.jpg', 'small.jpg');\r\n\r\n                speciesDiv.innerText = item.taxon.preferred_common_name ? \r\n                    (item.taxon.preferred_common_name) : (item.taxon.name);\r\n\t\t\t\tlet idsSuffix = item.identifications.length == 1 ? ' ID' : ' IDs';\r\n                idsDiv.innerText = item.identifications.length + idsSuffix\r\n                gradeDiv.innerText = valueMap[item.quality_grade]\r\n\r\n                gridLink.classList.add('ws-inat-link'); \r\n                gridItemDiv.classList.add('ws-inat-item')\r\n\t\t\t\ttopRowDiv.classList.add('ws-inat-top-row-info')\r\n\t\t\t\tidsDiv.classList.add('ws-inat-info')\r\n\t\t\t\tgradeDiv.classList.add('ws-inat-info')\r\n\t\t\t\tspeciesDiv.classList.add('ws-inat-info')\r\n                    \r\n                gridLink.href = item.uri;\r\n                gridLink.style.backgroundImage = `url('${bgurl}')`;\r\n\r\n\t\t\t\tgridLink.addEventListener('mouseover', function(){\r\n\t\t\t\t\tgradeDiv.textContent = inverseMap[gradeDiv.textContent]\r\n\t\t\t\t});\r\n\t\t\t\tgridLink.addEventListener('mouseout', function(){\r\n\t\t\t\t\tgradeDiv.textContent = valueMap[gradeDiv.textContent]\r\n\t\t\t\t});\r\n\r\n\t\t\t\ttopRowDiv.appendChild(idsDiv)\r\n\t\t\t\ttopRowDiv.appendChild(gradeDiv)\r\n\r\n\t\t\t\tgridItemDiv.appendChild(topRowDiv)\r\n                gridItemDiv.appendChild(speciesDiv);\r\n\r\n                gridLink.appendChild(gridItemDiv);\r\n    \r\n                inatgrid.appendChild(gridLink);\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            let newP = document.createElement('p')\r\n\t\t\tnewP.innerText = 'Error connecting to iNaturalist'\r\n\t\t\tinatgrid.insertAdjacentElement('afterend', newP)\r\n\t\t\tconsole.error('Error:', error);\r\n        });\r\n    })\r\n  \r\n  });"],"names":["document","addEventListener","formatAPIdate","isoDateStr","date","Date","month","String","getMonth","padStart","day","getDate","year","getFullYear","inatgrids","querySelectorAll","baseUrl","valueMap","inverseMap","forEach","inatgrid","params","dataset","d1","d2","url","URL","search","URLSearchParams","toString","fetch","then","response","ok","json","errorData","Error","error","status","data","results","length","item","gridItemDiv","createElement","topRowDiv","speciesDiv","idsDiv","gradeDiv","gridLink","bgurl","observation_photos","photo","replace","innerText","taxon","preferred_common_name","name","idsSuffix","identifications","quality_grade","classList","add","href","uri","style","backgroundImage","textContent","appendChild","catch","newP","insertAdjacentElement","console"],"sourceRoot":""}